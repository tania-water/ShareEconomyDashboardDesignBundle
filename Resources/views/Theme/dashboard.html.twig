{% extends "form_div_layout.html.twig" %}

{%- block form_row -%}
    <div class="form-group has-feedback{% if (not compound or force_error|default(false)) and not valid %} has-error{% endif %} {% if form.vars.attr['parent-class'] is defined %} {{form.vars.attr['parent-class']}}{% endif %}">
        {%- if type is not defined or type not in ['file', 'hidden'] and  attr['data-remove-label'] is not defined -%}
        {{- form_label(form) -}}
        {%- endif -%}
        {% if attr['dev-full-width-widget'] is defined and attr['dev-full-width-widget'] %}
            <div class="col-lg-12">
        {%else%}
            {%- if type is defined and type == 'file' and attr['data-image-type'] is defined -%}
            <div class="col-lg-12">
            {%- endif -%}
            {%- if type is not defined or type not in ['file', 'hidden'] -%}
            <div class="col-lg-10">
            {%- endif -%}
        {%- endif -%}
        {{- form_widget(form) -}}
        {{- form_errors(form) -}}
        {% if attr['data-error-after-selector'] is defined and attr['data-error-after-selector'] == '.dev-after-element' %}<div class="dev-after-element"></div>{% endif %}
        {%- if type is not defined or type not in ['file', 'hidden'] or type == 'file' and attr['data-image-type'] is defined -%}
        </div>
        {%- endif -%}
    </div>
{%- endblock form_row -%}

{%- block form_start -%}
    {% set attr = attr|merge({'novalidate': '','autocomplete':"off", 'class': (attr.class|default('form-horizontal'))}) %}
    {{- parent() -}}
{%- endblock form_start -%}

{%- block form_label -%}
    {% if label is not same as(false) -%}
        {% set label_attr = label_attr|merge({'class': (label_attr.class|default('control-label col-lg-2'))}) %}
    {%- endif -%}
    {{- parent() -}}
{%- endblock form_label -%}

{% block form_widget_simple -%}
    {# adding bootstrap class #}
    {%- if type is not defined or type not in ['file', 'hidden'] -%}
        {%- set attr = attr|merge({class: (attr.class|default('form-control'))}) -%}
    {%- endif -%}

    {# adding profile file upload input style #}
    {%- if type is defined and type == 'file' and attr['data-image-type'] is defined and attr['data-image-type'] == 'profile' -%}
    <div class="fileupload {% if attr['data-image-url'] is defined and attr['data-image-url']!='' %}fileupload-exists{%else %}fileupload-new{%endif%}" data-provides="fileupload">
            <div class="fileupload-new thumbnail" style="width: 150px; height: 150px;">
                <img src="{{ asset('bundles/ibtikarshareeconomydashboarddesign/images/profile.jpg') }}" alt="{{ attr['data-image-alt']|default('Profile image'|trans) }}">
            </div>
            <div class="fileupload-preview fileupload-exists thumbnail {{id}}_preview" style="max-width: 200px; max-height: 200px; line-height: 20px;">
                {% if attr['data-image-url'] is defined and attr['data-image-url']!='' %}
                <img src="{{ asset(attr['data-image-url']) }}" alt="{{ attr['data-image-alt']|default('Profile image'|trans) }}">
                {% endif %}
            </div>
            <div class="uploadCoverImg {{id}}_selector">
                <span class="btn btn-default btn-file btn-primary" style=" cursor: pointer;">
                    <span class="fileupload-new" onfocus="myFunction(this)" style="cursor: pointer">{% trans %}Choose picture{% endtrans %}</span>
                    <span class="fileupload-exists">{% trans %}Change{% endtrans %}</span>
    {%- endif -%}

    {# displaying the widget #}
    {{- parent() -}}

    {% if description is defined and  description | length %}
        <span id="helpBlock" class="help-block">{{ description }}</span>
    {% endif %}

    {# adding profile file upload input style #}
    {%- if type is defined and type == 'file' and attr['data-image-type'] is defined and attr['data-image-type'] == 'profile' -%}
                </span>
                <a href="#" class="btn btn-default fileupload-exists btn-primary {% if attr['data-image-url'] is defined and attr['data-image-url']!='' %}dev-btn-fileupload-remove{%endif%}" data-dismiss="fileupload">{% trans %}Delete{% endtrans %}</a>
            </div>
        </div>
    {%- endif -%}

    {# adding email input style #}
    {%- if type is defined and type == 'email' and attr['data-validate-element'] is not defined-%}
        <div class="form-control-feedback">
            <i class="icon-mail5 text-muted"></i>
        </div>
    {%- endif -%}
    {% if attr['data-validate-element'] is defined %}
        <div class="form-control-feedback dev-inputLoader dev-loader" style="display: none;">
            <i class="icon-spinner2 spinner"></i>
        </div>
        <div class="form-control-feedback dev-failLoader dev-loader" style="{% if form.vars.errors|length ==0 %}display: none;{%endif %}">
            <i class="icon-cancel-circle2"></i>
        </div>
        <div class="form-control-feedback dev-successLoader dev-loader" style="display: none;">
            <i class="icon-checkmark-circle"></i>
        </div>
    {% endif %}
{%- endblock form_widget_simple %}

{% block form_errors -%}
    {% if errors|length > 0 -%}
        {%- if not form.parent -%}
            <div class="row">
                <div class="col-md-12">
        {%- endif -%}
        {%- for error in errors -%}
            {% if form.parent %}<span class="help-block">{% else %}<div class="alert alert-danger no-border"><button data-dismiss="alert" class="close" type="button"><span>Ã—</span><span class="sr-only">{% trans %}Close{% endtrans %}</span></button>{% endif %}{{ error.message|trans }}{% if form.parent %}</span>{% else %}</div>{% endif %}
        {%- endfor -%}
        {%- if not form.parent -%}
                </div>
            </div>
        {%- endif -%}
    {%- endif %}
{%- endblock form_errors %}

{% block button_row -%}
    <noscript>
        <div class="form-group">
            {{- form_widget(form) -}}
        </div>
    </noscript>
{%- endblock button_row %}

{% block button_widget -%}
    {% set attr = attr|merge({class: (attr.class|default('btn btn-primary btn-block'))|trim}) %}
    {%- if label is empty -%}
        {%- if label_format is not empty -%}
            {% set label = label_format|replace({
                '%name%': name,
                '%id%': id,
            }) %}
        {%- else -%}
            {% set label = name|humanize %}
        {%- endif -%}
    {%- endif -%}
    <button type="{{ type|default('button') }}" {{ block('button_attributes') }}>{{ translation_domain is same as(false) ? label : label|trans({}, translation_domain) }}<i class="{{ attr['icon']|default('icon-circle-left2') }} position-right"></i>
    </button>
{%- endblock %}


{%- block textarea_widget -%}
<textarea {{ block('widget_attributes') }} cols="5" rows="5" class="form-control">{{ value }}</textarea>
{% if description is defined and  description | length %}
    <span id="helpBlock" class="help-block">{{ description }}</span>
{% endif %}
{%- endblock textarea_widget -%}

{%- block choice_widget_expanded -%}
    <div {{ block('widget_container_attributes') }}>
    {%- for child in form %}

    {% if child.vars.block_prefixes.2 == 'radio' %}
        <label class="radio-inline">
            {{- form_widget(child, {'attr': form.vars.attr}) -}}
            {{child.vars.value|trans({}, translation_domain) }}
        </label>
    {% else %}
        {{- form_widget(child) -}}
        {{- form_label(child, null, {translation_domain: choice_translation_domain}) -}}
    {% endif %}
    {% endfor -%}
    </div>
{%- endblock choice_widget_expanded -%}

{%- block choice_widget_options -%}
    {% for group_label, choice in options %}
        {%- if choice is iterable -%}
            <optgroup label="{{ choice_translation_domain is same as(false) ? group_label : group_label|trans({}, choice_translation_domain) }}">
                {% set options = choice %}
                {{- block('choice_widget_options') -}}
            </optgroup>
        {%- else -%}
        <option data-image="{{ asset( attribute(choice.data, attr['data-img-method'] is defined?attr['data-img-method']:'webPath')|default(attr['data-img-default'] is defined?attr['data-img-default']:'bundles/ibtikarshareeconomydashboarddesign/images/profile.jpg'))}}" value="{{ choice.value }}"{% if choice.attr %} {% set attr = choice.attr %}{{ block('attributes') }}{% endif %}{% if choice is selectedchoice(value) %} selected="selected"{% endif %}>{{ choice_translation_domain is same as(false) ? choice.label : choice.label|trans({}, choice_translation_domain) }}</option>
        {%- endif -%}
    {% endfor %}
{%- endblock choice_widget_options -%}

{% block phone_widget %}
{% spaceless %}
        {{- form_widget(form.phone) -}}
        {{- form_widget(form.countryCode) -}}
        {{ form_errors(form.phone) }}

{% endspaceless %}
{% endblock phone_widget %}

{% block polygon_widget %}
    {% spaceless %}
        {% if google_api_key is defined %}
        <div id="{{ id }}_map" style="height: 500px;"></div>
        <input {{ block('widget_attributes') }} type="hidden" value="{{ value }}" />
        <script>
            var map_{{ id }};
            function init{{ id }}Map() {
                map_{{ id }} = new google.maps.Map(document.getElementById('{{ id }}_map'), {
                    center: {lat: 23.9373976, lng: 46.3789852},
                    zoom: 9
                });
                var drawingManager = new google.maps.drawing.DrawingManager({
                    drawingMode: {{ value ? 'null' : 'google.maps.drawing.OverlayType.POLYGON' }},
                    drawingControl: {{ value ? 'false' : 'true' }},
                    drawingControlOptions: {
                        position: google.maps.ControlPosition.TOP_CENTER,
                        drawingModes: ['polygon']
                    }
                });
                drawingManager.setMap(map_{{ id }});
                function updatePolygonData(polygon) {
                    var vertices = polygon.getPath();
                    var polygonCoordinations = [];
                    for (var i = 0; i < vertices.getLength(); i++) {
                        var xy = vertices.getAt(i);
                        polygonCoordinations.push({lat: xy.lat(), lng: xy.lng()});
                    }
                    document.getElementById('{{ id }}').value = JSON.stringify(polygonCoordinations);
                }
                function attachListenersToPolygon(polygon) {
                    google.maps.event.addListener(polygon, 'dragend', function () {
                        updatePolygonData(polygon);
                    });
                    google.maps.event.addListener(polygon.getPath(), 'set_at', function () {
                        updatePolygonData(polygon);
                    });
                    google.maps.event.addListener(polygon.getPath(), 'remove_at', function () {
                        updatePolygonData(polygon);
                    });
                    google.maps.event.addListener(polygon.getPath(), 'insert_at', function () {
                        updatePolygonData(polygon);
                    });
                }
                {% if value %}
                var polygonPath = JSON.parse('{{ value|raw }}');
                var mapPolygon = new google.maps.Polygon({
                    paths: polygonPath,
                    editable: true,
                    draggable: true,
                    geodesic: true
                });
                mapPolygon.setMap(map_{{ id }});
                attachListenersToPolygon(mapPolygon);
                var polygonBounds = new google.maps.LatLngBounds();
                for (var i = 0; i < polygonPath.length; i++) {
                    polygonBounds.extend(new google.maps.LatLng(polygonPath[i]['lat'], polygonPath[i]['lng']));
                }
                map_{{ id }}.setCenter(polygonBounds.getCenter());
                {% else %}
                google.maps.event.addListener(drawingManager, 'polygoncomplete', function (polygon) {
                    drawingManager.setOptions({drawingMode: null, drawingControl: false});
                    polygon.setOptions({editable: true, draggable: true, geodesic: true});
                    attachListenersToPolygon(polygon);
                    updatePolygonData(polygon);
                });
                {% endif %}
            }
        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key={{ google_api_key }}&libraries=drawing&callback=init{{ id }}Map" async defer></script>
        {% else %}
            <div>Please define google_api_key in twig global variables</div>
        {% endif %}
    {% endspaceless %}
{% endblock %}